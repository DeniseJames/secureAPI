type CustomerDiscovery {
  email: String! # Primary key
  additionalFeedback: String
  storeName: String
  role: String
  city: String
  state: String
  monthlyLossFromTheft: Float
  merchandiseTheftCategories: [String]
  monthlySecuritySpend: Float
  securityImprovements: String
  roleChallenges: String
  expensiveTheftTypes: [String]
  theftPreventionPlans: [String]
  theftPreventionTools: [String]
  theftPatterns: String
  staffTraining: [String]
  faceRecognitionEnhancement: String
}

type CustomerDiscoveryConnection {
  items: [CustomerDiscovery]
  nextToken: String
}

input CreateCustomerDiscoveryInput {
  email: String!
  additionalFeedback: String
  storeName: String
  role: String
  city: String
  state: String
  monthlyLossFromTheft: Float
  merchandiseTheftCategories: [String]
  monthlySecuritySpend: Float
  securityImprovements: String
  roleChallenges: String
  expensiveTheftTypes: [String]
  theftPreventionPlans: [String]
  theftPreventionTools: [String]
  theftPatterns: String
  staffTraining: [String]
  faceRecognitionEnhancement: String
}

input UpdateCustomerDiscoveryInput {
  email: String!
  additionalFeedback: String
  storeName: String
  role: String
  city: String
  state: String
  monthlyLossFromTheft: Float
  merchandiseTheftCategories: [String]
  monthlySecuritySpend: Float
  securityImprovements: String
  roleChallenges: String
  expensiveTheftTypes: [String]
  theftPreventionPlans: [String]
  theftPreventionTools: [String]
  theftPatterns: String
  staffTraining: [String]
  faceRecognitionEnhancement: String
}

input DeleteCustomerDiscoveryInput {
  email: String!
}

type Contact {
  email: String! # Primary key
  name: String
  comment: String
}

input CreateContactInput {
  email: String!
  name: String
  comment: String
}

input UpdateContactInput {
  email: String!
  name: String
  comment: String
}

input DeleteContactInput {
  email: String!
}

type Mutation {
  # Customer Discovery Mutations
  createCustomerDiscovery(input: CreateCustomerDiscoveryInput!): CustomerDiscovery
  updateCustomerDiscovery(input: UpdateCustomerDiscoveryInput!): CustomerDiscovery
  deleteCustomerDiscovery(input: DeleteCustomerDiscoveryInput!): CustomerDiscovery

  # Contact Mutations
  createContact(input: CreateContactInput!): Contact
  updateContact(input: UpdateContactInput!): Contact
  deleteContact(input: DeleteContactInput!): Contact
}

type Query {
  # Customer Discovery Queries
  getCustomerDiscovery(email: String!): CustomerDiscovery
  listCustomerDiscoveries(
    filter: TableCustomerDiscoveryFilterInput
    limit: Int
    nextToken: String
  ): CustomerDiscoveryConnection

  # Contact Queries
  getContact(email: String!): Contact
  listContacts: [Contact]
}

type Subscription {
  # Customer Discovery Subscriptions
  onCreateCustomerDiscovery(
    email: String,
    additionalFeedback: String,
    storeName: String,
    role: String,
    city: String
  ): CustomerDiscovery @aws_subscribe(mutations: ["createCustomerDiscovery"])

  onUpdateCustomerDiscovery(
    email: String,
    additionalFeedback: String,
    storeName: String,
    role: String,
    city: String
  ): CustomerDiscovery @aws_subscribe(mutations: ["updateCustomerDiscovery"])

  onDeleteCustomerDiscovery(
    email: String,
    additionalFeedback: String,
    storeName: String,
    role: String,
    city: String
  ): CustomerDiscovery @aws_subscribe(mutations: ["deleteCustomerDiscovery"])

  # Contact Subscriptions
  onCreateContact(email: String, name: String, comment: String): Contact @aws_subscribe(mutations: ["createContact"])
  onUpdateContact(email: String, name: String, comment: String): Contact @aws_subscribe(mutations: ["updateContact"])
  onDeleteContact(email: String): Contact @aws_subscribe(mutations: ["deleteContact"])
}

input TableCustomerDiscoveryFilterInput {
  email: TableStringFilterInput
  additionalFeedback: TableStringFilterInput
  storeName: TableStringFilterInput
  role: TableStringFilterInput
  city: TableStringFilterInput
  state: TableStringFilterInput
  monthlyLossFromTheft: TableFloatFilterInput
  merchandiseTheftCategories: TableStringFilterInput
  monthlySecuritySpend: TableFloatFilterInput
  securityImprovements: TableStringFilterInput
  roleChallenges: TableStringFilterInput
  expensiveTheftTypes: TableStringFilterInput
  theftPreventionPlans: TableStringFilterInput
  theftPreventionTools: TableStringFilterInput
  theftPatterns: TableStringFilterInput
  staffTraining: TableStringFilterInput
  faceRecognitionEnhancement: TableStringFilterInput
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}
